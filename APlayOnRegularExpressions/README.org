#+TITLE: A Play On Regular Expressions

* Introduction

Follow the functional pearl "A Play on Regular Expressions" by Sebastian Fischer
Frank Huch and Thomas Wilke.

* Runtime comparison of functional pearl vs grep
On a laptop ~uname -a~:
: Linux valerie 4.15.0-111-generic #112-Ubuntu SMP Thu Jul 9 20:32:34 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
and on a tablet inside a chroot ~uname -a~:
: Linux localhost 3.18.14-15260192 #1 SMP PREEMPT Tue Mar 31 19:26:30 KST 2020 armv8l GNU/Linux
both with ~ghc --version~:
: The Glorious Glasgow Haskell Compilation System, version 8.4.4

Initially, I couldn't replicate the results of the functional pearl
(unless their machine was way more powerful than mine): the Haskell
program ran slower than grep even for large numbers (trying with 1400
crashed the Linux chroot on my tablet).  The same code
(68887c0c5f83eed33a606d1a3a2b980e2604ca37) on x86_64 had similar
problems.

In the end, the combination of enabling optimisations, specialising
the functions on (Char, Bool) and mainly, making the ~emptyS~ and
~finalS~ fields strict made a difference.

** Haskell
*** Command Line
#+begin_src shell :exports code
  MATCH=$(cabal new-exec which match)
  GENRND=$(cabal new-exec which genrnd)
  for x in 5 10 100 200 300 400 500 600 700 800 900 1000 ; do echo $x ; time $GENRND -aa $x | $MATCH 2 a$x ; done
#+end_src

*** Results
**** On laptop
|    n | real [s] | user [s] | sys [s] |
|    5 |    0.003 |    0.000 |   0.005 |
|   10 |    0.003 |    0.002 |   0.003 |
|  100 |    0.009 |    0.011 |   0.000 |
|  200 |    0.019 |    0.015 |   0.006 |
|  300 |    0.027 |    0.028 |   0.000 |
|  400 |    0.050 |    0.052 |   0.001 |
|  500 |    0.079 |    0.070 |   0.011 |
|  600 |    0.125 |    0.122 |   0.005 |
|  700 |    0.170 |    0.164 |   0.007 |
|  800 |    0.231 |    0.233 |   0.000 |
|  900 |    0.298 |    0.299 |   0.000 |
| 1000 |    0.397 |    0.399 |   0.000 |

**** On tablet
~./benchmark~:
| Test      | Bytes allocated | Gen 0 colls | Gen 0 elapsed | Gen 1 colls | Gen 1 elapsed | MUT [s] | real [s] |
|-----------+-----------------+-------------+---------------+-------------+---------------+---------+----------|
| 2s a800   | 220,751,124     |         209 | 0.199s        |           2 | 0.003s        | 0.898s  | 0m1.172s |
| 3s a800   | 97,700,968      |          92 | 0.062s        |           2 | 0.002s        | 0.470s  | 0m0.571s |
| 2t a800   | 220,716,160     |         209 | 0.196s        |           2 | 0.003s        | 0.900s  | 0m1.148s |
| 3t a800   | 97,666,004      |          92 | 0.062s        |           2 | 0.002s        | 0.467s  | 0m0.568s |
| 2t a1000  | 344,735,440     |         328 | 0.374s        |           2 | 0.003s        | 1.420s  | 0m1.839s |
| 3t a1000  | 152,083,844     |         144 | 0.114s        |           2 | 0.002s        | 0.744s  | 0m0.905s |
| 2s a 45 a | 48,832,824      |          45 | 0.007s        |           2 | 0.002s        | 0.201s  | 0m0.278s |
| 3s a 45 a | 46,332,504      |          43 | 0.007s        |           2 | 0.002s        | 0.204s  | 0m0.281s |
| 2t a 45 a | 48,648,756      |          45 | 0.004s        |           2 | 0.001s        | 0.200s  | 0m0.271s |
| 3t a 45 a | 46,064,532      |          43 | 0.004s        |           2 | 0.001s        | 0.203s  | 0m0.275s |
| 2t a 60 a | 84,341,124      |          79 | 0.008s        |           2 | 0.001s        | 0.343s  | 0m0.431s |
| 3t a 60 a | 79,529,036      |          75 | 0.009s        |           2 | 0.001s        | 0.353s  | 0m0.456s |

** Grep
*** Command Line
#+begin_src shell :exports code
  GENRND=$(cabal new-exec which genrnd)
  for x in 5 10 100 200 300 400 500 600 700 800 900 1000 ; do echo $x ; time $GENRND -aa $x | grep -cE "^(a?){$x}a{$x}\$" ; done
#+end_src

*** Results
|    n | real [s] | user [s] | sys [s] |
|    5 |    0.005 |    0.004 |   0.004 |
|   10 |    0.004 |    0.006 |   0.000 |
|  100 |    0.018 |    0.014 |   0.004 |
|  200 |    0.068 |    0.063 |   0.008 |
|  300 |    0.206 |    0.181 |   0.027 |
|  400 |    0.451 |    0.434 |   0.020 |
|  500 |    0.871 |    0.837 |   0.036 |
|  600 |    1.482 |    1.446 |   0.036 |
|  700 |    2.355 |    2.300 |   0.057 |
|  800 |    3.564 |    3.494 |   0.068 |
|  900 |    5.061 |    4.978 |   0.080 |
| 1000 |    6.939 |    6.809 |   0.119 |
